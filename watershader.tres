[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

render_mode specular_schlick_ggx, depth_draw_opaque, cull_back, blend_mix, diffuse_burley, shadows_disabled;

uniform vec4 color_mix: hint_color = vec4(0.106, 0.874, 0.690, 0.968);
uniform vec4 WaveA;
uniform vec4 WaveB;
uniform vec4 WaveC;

vec3 GerstnerFunction(vec4 wave, vec3 point, inout vec3 tangent, inout vec3 binormal)
{
	
	float steepness = wave.z;
	float wavelength = wave.w;
	float k = 2.0*3.14159265358/wavelength; //wave number
	float c = sqrt(9.8/k); // effects of gravity
	vec2 d = normalize(wave.xy); //direction
	float f = k * (dot(d,point.xz)-c*TIME); // frequency
	float a = steepness/k; // amplitude
	
	tangent += vec3(
		-d.x * d.x * (steepness * sin(f)),
		d.x * (steepness * cos(f)),
		-d.x * d.y * (steepness * sin(f))
		);
	binormal += vec3(
		-d.x * d.y * (steepness * sin(f)),
		d.y * (steepness * cos(f)),
		-d.y * d.y * (steepness * sin(f))
		);
	return vec3(
		d.x * (a * cos(f)),
		a * sin(f),
		d.y * (a * cos(f)));
}


void vertex()
{
	
	vec3 gridpoint = VERTEX.xyz;
	vec3 tangent = vec3(0,0,0);
	vec3 binormal = vec3(0,0,0);
	vec3 p = gridpoint;
	p+= GerstnerFunction(WaveA, gridpoint, tangent, binormal);
	p+= GerstnerFunction(WaveB, gridpoint, tangent, binormal);
	p+= GerstnerFunction(WaveC, gridpoint, tangent, binormal);
	vec3 normal = normalize(cross(binormal, tangent));
	VERTEX = p.xyz;
	NORMAL = normal;
}




uniform sampler2D diffusetex;
uniform sampler2D flowmap;
uniform sampler2D heightmap;

uniform float flow_strength;
uniform float flow_speed;
uniform float height_scale;
uniform float height_scale_modulated;
uniform float jump_a;
uniform float jump_b;
uniform float tiling;
uniform vec4 color;
uniform float fogginess = 0.5;
uniform vec4 fogcolor = vec4(0.0, 0.482353, 0.823529, 1.0);


vec3 flowUVW(vec2 uv, vec2 flow_vector, vec2 jump, float flow_offset, float time, bool flow_b)
{
	float phaseOffset = flow_b ? 0.5: 0.0;
	float progress = fract(time + phaseOffset);
	vec3 uvw;
	uvw.xy = uv - flow_vector * (progress * flow_offset);
	uvw.xy *= tiling;
	uvw.xy += phaseOffset;
	uvw.xy += (time - progress) * jump;
	uvw.z = 1.0 - abs(1.0-2.0*progress);
	return uvw;
}

vec3 unpackHeight(vec4 heightdata)
{
	vec3 dh = heightdata.agb;
	dh.xy = dh.xy * 2.0 - 1.0;
	return dh;
}

void fragment()
{
	vec3 flow = texture(flowmap, UV).rgb;
	flow.xy = flow.xy * 2.0 - 1.0;
	flow *= flow_strength;
	float noise = texture(flowmap, UV).a;
	float time = TIME * flow_speed + noise;
	vec2 uvT = UV + time;
	
	vec2 jump;
	jump.x = jump_a;
	jump.y = jump_b;
	float offset = 0.5;
	
	vec3 uvwA = flowUVW(UV, flow.xy, jump, offset, time, false);
	vec3 uvwB = flowUVW(UV, flow.xy, jump, offset, time, true);
	vec4 texcol1 = texture(diffusetex, uvwA.xy)*uvwA.z;
	vec4 texcol2 = texture(diffusetex, uvwB.xy)* uvwB.z;
	float f_height_scale = flow.z  * height_scale_modulated + height_scale;
	
	vec3 dhA = unpackHeight(texture(heightmap, uvwA.xy)) * (uvwA.z * f_height_scale);
	vec3 dhB = unpackHeight(texture(heightmap,uvwB.xy)) * (uvwB.z * f_height_scale);
	
	vec4 col = normalize(texcol1 + texcol2) * color;
	
	
	
	float depth = textureLod(DEPTH_TEXTURE, SCREEN_UV,0.0).x;
	vec4 dpos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);
    vec3 pos = dpos.xyz / dpos.w;

    vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
    vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
    view.xyz /= view.w;
    float linear_depth = -view.z;
    float fog = exp2(-fogginess * (linear_depth - pos.z));
	
	
	
	
	
	vec4 background = textureLod(SCREEN_TEXTURE, SCREEN_UV,0.0);
	vec4 fincol = mix(background, col, color_mix);
	ALBEDO = mix(fincol.rgb, fogcolor.rgb,fog);
	EMISSION = ALBEDO;
	SPECULAR = 0.8;
	ALPHA = color_mix.a;
	NORMALMAP.xy = normalize(-(dhA.xy + dhB.xy));
	NORMALMAP.z = 1.0;
	
	}"
